name: radigenius-backend
services:
    # redis:
    #   container_name: redis
    #   image: redis
    #   restart: always
    #   networks:
    #     - networkbackend
    #   command: redis-server --save 60 1 --loglevel warning

    seq:
        image: datalust/seq:latest
        container_name: radigenius-seq
        restart: always
        networks:
            - networkbackend
        ports:
            - "5341:80"
        environment:
            - ACCEPT_EULA=Y
            - SEQ_LICENSE_KEY=your-license-key-here
            - TZ=Asia/Tehran
        volumes:
            - seq-data:/data

    db:
        container_name: radigenius-db
        image: postgres:alpine
        restart: always
        networks:
            - networkdb
        volumes:
            - postgres_data:/var/lib/postgresql/data
        env_file:
            - ../envs/prod/db/.env
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
            interval: 10s
            timeout: 3s
            retries: 3

    backend:
        build:
            context: ..
            dockerfile: docker/Dockerfile
        container_name: radigenius-api-backend
        image: radigenius-api-backend
        restart: always
        networks:
            - networkbackend
            - networkfront
            - networkdb
        command: sh -c "python3 manage.py migrate --noinput && python3 manage.py init && python3 manage.py collectstatic --noinput && gunicorn infrastructure.server.wsgi --bind 0.0.0.0:8000"
        volumes:
            - ../src:/app
            - static_volume:/app/presentation/static
            - media_volume:/app/presentation/media
        depends_on:
            db:
                condition: service_healthy
            seq:
                condition: service_started
            # redis:
            #   condition: service_started
        env_file:
            - ../envs/prod/backend/.env
    # worker:
    #   image: radigenius-backend
    #   container_name: worker
    #   command: celery -A infrastructure.celery.celery:app worker --loglevel=info
    #   restart: always
    #   networks:
    #     - networkbackend
    #     - networkdb
    #   volumes:
    #     - ../src:/app
    #   env_file:
    #     - ../envs/prod/backend/.env
    #   depends_on:
    #     - backend

    # beat:
    #   image: radigenius-backend
    #   container_name: beat
    #   command: celery -A infrastructure.celery.celery:app beat --loglevel=info
    #   restart: always
    #   networks:
    #     - networkbackend
    #     - networkdb
    #   volumes:
    #     - ../src:/app
    #   env_file:
    #     - ../envs/prod/backend/.env
    #   depends_on:
    #     - worker

networks:
    networkbackend:
        driver: bridge
        name: networkBackend
    networkdb:
        driver: bridge
        name: networkDB

volumes:
    seq-data:
    static_volume:
    media_volume:
    postgres_data:
