"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from datetime import datetime
from datetime import timedelta
from pathlib import Path

from decouple import config, Csv
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
# from sentry_sdk.integrations.celery import CeleryIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", cast=bool)

ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS", cast=lambda v: [s.strip() for s in v.split(",")]
)

# IP Whitelist - IPs that should never be banned
IP_WHITELIST = config("IP_WHITELIST", cast=lambda v: [s.strip() for s in v.split(",")], default=[])

# Application definition


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third Party
    "rest_framework",
    "drf_spectacular",
    "corsheaders",
    "django_filters",
    # "django_celery_beat",
    # Authentication
    "rest_framework_simplejwt",
    # Debug
    "debug_toolbar",
    # Apps
    ## Django apps will be auto registered!
]

APPS_DIRECTORY = "domain/apps"

for app_path in (BASE_DIR / APPS_DIRECTORY).iterdir():
    # Check if it's a directory and contains an 'apps.py' file
    if app_path.is_dir() and (app_path / "apps.py").exists():
        app = app_path.relative_to(BASE_DIR).as_posix().replace("/", ".")
        INSTALLED_APPS.append(app)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "infrastructure.middlewares.ban.BanMiddleware",
    # "infrastructure.middlewares.recaptcha.RecaptchaMiddleware",
]

ROOT_URLCONF = "presentation.api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "presentation/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "infrastructure.server.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config("DB_ENGINE"),
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASS"),
        "HOST": config("DB_HOST"),
        "PORT": config("DB_PORT", cast=int),
        "CONN_HEALTH_CHECKS": True,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "presentation/static"

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "presentation/media"

STATICFILES_DIRS = [BASE_DIR / "presentation/staticfiles"]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

# Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_THROTTLE_CLASSES": [
        "infrastructure.throttles.custom_throttle.CustomRateThrottle"
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": (
        "presentation.renderers.camelize_renderer.CamelizeRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
        # Any other renders
    ),
    "DEFAULT_PARSER_CLASSES": (
        # If you use MultiPartFormParser or FormParser, we also have a camel case version
        # "djangorestframework_camel_case.parser.CamelCaseFormParser",
        # "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
        # Any other parsers
    ),
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "JSON_UNDERSCOREIZE": {
        "no_underscore_before_number": True,
    },
    "DEFAULT_SCHEMA_CLASS": "presentation.drf_spectacular.base.CustomAutoSchema",
    "EXCEPTION_HANDLER": "infrastructure.exceptions.custom_handlers.custom_exception_handler",
}

# remove BrowsableAPIRenderer in production
if not DEBUG:
    REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"] = (
        "presentation.renderers.camelize_renderer.CamelizeRenderer",
    )

# Authentication
# Jwt
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(weeks=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(weeks=4),
    "UPDATE_LAST_LOGIN": False,
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "TOKEN_OBTAIN_SERIALIZER": "infrastructure.serializers.identity.TokenObtainPairSerializer",
}
AUTH_USER_MODEL = "identity.User"

# DRF spectacular
SPECTACULAR_SETTINGS = {
    "TITLE": config("APP_NAME"),
    "DESCRIPTION": "Lorem",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": r"/api/v[0-9].[0-9]/",
    "GET_LIB_DOC_EXCLUDES": "presentation.drf_spectacular.base.custom_get_lib_doc_excludes",
    "SERVE_PERMISSIONS": ["application.permissions.permissions.IsAdminUser"],
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
    },
}

# Logging

# Create the "logs" directory if it doesn't exist
LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(parents=True, exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} | {asctime} | {module} | {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": config("CONSOLE_LOG_LEVEL"),
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": config("FILE_LOG_LEVEL"),
            "class": "logging.FileHandler",
            "filename": Path(LOGS_DIR)
            / f'{config("APP_NAME")}-{datetime.now():%Y-%m-%d}.log',
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": config("LOG_HANDLERS", cast=Csv()),
        "level": "DEBUG",
    },
    "loggers": {
        "django": {
            "handlers": config("LOG_HANDLERS", cast=Csv()),
            "level": config("CONSOLE_LOG_LEVEL"),
            "propagate": False,
        },
    },
}

if not DEBUG:
    LOGGING["handlers"]["seq"] = {
        "level": config("SEQ_LOG_LEVEL"),
        "class": "seqlog.SeqLogHandler",
        "server_url": config("SEQ_SERVER_URL"),
    }

# security configs for production
if not DEBUG:
    # Https settings
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True
    # SECURE_SSL_REDIRECT = True # redirected using cdn
    CSRF_TRUSTED_ORIGINS = config(
        "TRUSTED_ORIGINS", cast=lambda v: [s.strip() for s in v.split(",")]
    )

    # HSTS settings
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True

    # more security settings
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = "SAMEORIGIN"
    SECURE_REFERRER_POLICY = "strict-origin"
    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# CORS

# Allow credentials (if your API uses cookies, auth tokens, etc.)
CORS_ALLOW_CREDENTIALS = True

# Allow specific methods for preflight
CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "OPTIONS",
    "PUT",
    "PATCH",
    "DELETE",
]

# Allow specific headers (if your frontend sends Authorization, Content-Type, etc.)
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    # Sentry specific headers
    "sentry-trace",
    "baggage",
]

if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
else:
    CORS_ALLOWED_ORIGINS = config(
        "TRUSTED_ORIGINS", cast=lambda v: [s.strip() for s in v.split(",")]
    )

# Celery Configs
# CELERY_BROKER_URL = "redis://redis:6379/1"
# CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Cache
# if config("TEST_ENV", cast=bool, default=False):
#     CACHES = {
#         "default": {
#             "BACKEND": "django.core.cache.backends.dummy.DummyCache",
#         }
#     }
# else:
#     CACHES = {
#         "default": {
#             "BACKEND": "django_redis.cache.RedisCache",
#             "LOCATION": "redis://redis:6379/2",
#             "OPTIONS": {
#                 "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             },
#         }
#     }

# RECAPTCHA_SETTINGS = {
#     "enable": False,
#     "API_KEY": config("RECAPTCHA_API_KEY"),
#     "SITE_KEY": config("RECAPTCHA_SITE_KEY"),
# }

# Django Debug Toolbar
if DEBUG:
    import socket

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]


# Sentry
if not DEBUG:
    sentry_sdk.init(
        dsn=config("SENTRY_DSN"),
        # Add data like request headers and IP for users;
        # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
        send_default_pii=True,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
        sample_rate=1.0,
        integrations=[
            # CeleryIntegration(),
            DjangoIntegration(
                transaction_style="url",
                middleware_spans=True,
                signals_spans=True,
                signals_denylist=[],
                cache_spans=True,
                http_methods_to_capture=(
                    "CONNECT",
                    "DELETE",
                    "GET",
                    "PATCH",
                    "POST",
                    "PUT",
                    "TRACE",
                ),
            ),
        ],
    )


# SMTP
EMAIL = {
    "HOST": config("EMAIL_HOST"),
    "PORT": config("EMAIL_PORT", cast=int),
    "USER": config("EMAIL_USER"),
    "PASSWORD": config("EMAIL_PASSWORD"),
    "FROM": config("EMAIL_FROM"),
}
